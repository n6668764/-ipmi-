import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import subprocess
import re
import configparser
import os
import logging
import threading
from datetime import datetime
from queue import Queue

# 配置日志系统
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='ipmi_monitor.log',
    filemode='w'
)


class IPMIMonitorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("联想服务器IPMI硬件监控工具 v4.2")
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        # 初始化参数
        self.data_queue = Queue()
        self.update_interval = 5000
        self.running = True
        self.ipmitool_path = tk.StringVar()
        self.bmc_ip = tk.StringVar(value="192.168.8.181")
        self.bmc_user = tk.StringVar(value="albert")
        self.bmc_pass = tk.StringVar(value="admin")
        self.fan_percent_vars = {i: tk.IntVar(value=50) for i in range(1, 8)}
        self.temp_settings = {
            'min_temp': tk.IntVar(value=52),
            'max_temp': tk.IntVar(value=70),
            'min_speed': tk.IntVar(value=14),
            'max_speed': tk.IntVar(value=100)
        }
        self.auto_mode_var = tk.BooleanVar(value=False)
        self.last_protection_time = None
        self.original_settings = {
            'mode': None,
            'speeds': {i: 0 for i in range(1, 8)},
            'protection_active': False
        }

        # 界面初始化
        self.create_widgets()
        self.load_config()
        self.start_update_cycle()
        self.root.after(100, self.auto_apply_custom_mode)

    def create_widgets(self):
        """创建界面组件"""
        # 顶部工具栏
        tool_frame = ttk.Frame(self.root)
        tool_frame.pack(fill=tk.X, padx=5, pady=5)

        # 工具路径组件
        ttk.Label(tool_frame, text="工具路径:").grid(row=0, column=0, padx=2)
        ttk.Entry(tool_frame, textvariable=self.ipmitool_path, width=30).grid(row=0, column=1, padx=2)
        ttk.Button(tool_frame, text="浏览", command=self.browse_ipmitool).grid(row=0, column=2, padx=2)

        # 连接参数组件
        ttk.Label(tool_frame, text="BMC IP:").grid(row=1, column=0, padx=2)
        ttk.Entry(tool_frame, textvariable=self.bmc_ip, width=15).grid(row=1, column=1, padx=2)
        ttk.Label(tool_frame, text="用户名:").grid(row=1, column=2, padx=2)
        ttk.Entry(tool_frame, textvariable=self.bmc_user, width=10).grid(row=1, column=3, padx=2)
        ttk.Label(tool_frame, text="密码:").grid(row=1, column=4, padx=2)
        ttk.Entry(tool_frame, textvariable=self.bmc_pass, show="*", width=10).grid(row=1, column=5, padx=2)
        ttk.Button(tool_frame, text="测试连接", command=self.test_connection).grid(row=1, column=6, padx=5)

        # 主内容区
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)

        # 左侧传感器面板
        sensor_frame = ttk.LabelFrame(main_frame, text="传感器数据")
        sensor_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        # 温度监控
        temp_group = ttk.LabelFrame(sensor_frame, text="温度监控")
        temp_group.pack(fill=tk.X, padx=5, pady=2)
        self.temp_labels = {
            'CPU1_Temp': ttk.Label(temp_group, text="CPU1温度: --"),
            'CPU2_Temp': ttk.Label(temp_group, text="CPU2温度: --"),
            'PCH_Temp': ttk.Label(temp_group, text="主板温度: --")
        }
        for label in self.temp_labels.values():
            label.pack(anchor=tk.W, padx=5, pady=2)

        # 电源监控
        psu_group = ttk.LabelFrame(sensor_frame, text="电源监控")
        psu_group.pack(fill=tk.X, padx=5, pady=2)
        self.psu_labels = {
            'PSU1_POUT': ttk.Label(psu_group, text="电源1功率: --"),
            'PSU2_POUT': ttk.Label(psu_group, text="电源2功率: --")
        }
        for label in self.psu_labels.values():
            label.pack(anchor=tk.W, padx=5, pady=2)

        # 电压监控
        voltage_group = ttk.LabelFrame(sensor_frame, text="电压监控")
        voltage_group.pack(fill=tk.X, padx=5, pady=2)
        self.voltage_labels = {
            'P3V3': ttk.Label(voltage_group, text="3.3V电压: --"),
            'P5V': ttk.Label(voltage_group, text="5V电压: --"),
            'P12V': ttk.Label(voltage_group, text="12V电压: --"),
            'Vbat': ttk.Label(voltage_group, text="电池电压: --"),
            'CPU1_VCCIN': ttk.Label(voltage_group, text="CPU1输入电压: --"),
            'CPU2_VCCIN': ttk.Label(voltage_group, text="CPU2输入电压: --")
        }
        for label in self.voltage_labels.values():
            label.pack(anchor=tk.W, padx=5, pady=2)

        # 风扇转速
        fan_group = ttk.LabelFrame(sensor_frame, text="风扇转速 (RPM)")
        fan_group.pack(fill=tk.X, padx=5, pady=5)
        self.fan_labels = {}
        for i in range(1, 8):
            self.fan_labels[f'FAN{i}'] = ttk.Label(fan_group, text=f"风扇 {i}: --")
            self.fan_labels[f'FAN{i}'].grid(row=(i - 1) // 4, column=(i - 1) % 4, padx=5, pady=2, sticky=tk.W)

        # 右侧控制面板
        control_frame = ttk.LabelFrame(main_frame, text="风扇控制")
        control_frame.pack(side=tk.RIGHT, fill=tk.Y, padx=5, pady=5)

        # 模式选择
        self.mode_var = tk.StringVar()
        modes = ["静音模式", "性能模式", "自定义模式", "智能模式"]
        mode_combobox = ttk.Combobox(control_frame, textvariable=self.mode_var, values=modes, state="readonly")
        mode_combobox.pack(pady=5)
        mode_combobox.bind("<<ComboboxSelected>>", self.on_mode_selected)
        self.mode_var.set("静音模式")

        # 模式内容框架
        self.quiet_mode_frame = ttk.Frame(control_frame)
        self.performance_mode_frame = ttk.Frame(control_frame)
        self.custom_mode_frame = ttk.Frame(control_frame)
        self.smart_mode_frame = ttk.Frame(control_frame)

        # 静音模式
        ttk.Label(self.quiet_mode_frame, text="设置所有风扇为静音转速（30%）").pack(pady=5)
        ttk.Button(self.quiet_mode_frame, text="应用静音模式", command=lambda: self.apply_preset_mode(30)).pack(pady=5)

        # 性能模式
        ttk.Label(self.performance_mode_frame, text="设置所有风扇为高性能转速（80%）").pack(pady=5)
        ttk.Button(self.performance_mode_frame, text="应用性能模式", command=lambda: self.apply_preset_mode(80)).pack(
            pady=5)

        # 自定义模式
        for fan_id in range(1, 8):
            frame = ttk.Frame(self.custom_mode_frame)
            frame.pack(fill=tk.X, padx=5, pady=2)
            ttk.Label(frame, text=f"风扇 {fan_id}:").pack(side=tk.LEFT)
            spinbox = ttk.Spinbox(frame, from_=0, to=100, textvariable=self.fan_percent_vars[fan_id], width=5)
            spinbox.pack(side=tk.LEFT, padx=5)
            ttk.Button(frame, text="设置", command=lambda fid=fan_id: self.set_single_fan(fid)).pack(side=tk.LEFT)

        # 智能模式
        temp_control_frame = ttk.Frame(self.smart_mode_frame)
        temp_control_frame.pack(pady=5)
        ttk.Label(temp_control_frame, text="最低温度(℃):").grid(row=0, column=0)
        ttk.Spinbox(temp_control_frame, from_=30, to=60, textvariable=self.temp_settings['min_temp'], width=5).grid(
            row=0, column=1)
        ttk.Label(temp_control_frame, text="最高温度(℃):").grid(row=1, column=0)
        ttk.Spinbox(temp_control_frame, from_=60, to=90, textvariable=self.temp_settings['max_temp'], width=5).grid(
            row=1, column=1)
        ttk.Label(temp_control_frame, text="最低转速(%):").grid(row=2, column=0)
        ttk.Spinbox(temp_control_frame, from_=20, to=50, textvariable=self.temp_settings['min_speed'], width=5).grid(
            row=2, column=1)
        ttk.Label(temp_control_frame, text="最高转速(%):").grid(row=3, column=0)
        ttk.Spinbox(temp_control_frame, from_=50, to=100, textvariable=self.temp_settings['max_speed'], width=5).grid(
            row=3, column=1)
        self.auto_status_var = tk.StringVar(value="温控状态: 未启用")
        ttk.Label(self.smart_mode_frame, textvariable=self.auto_status_var).pack(pady=5)

        self.quiet_mode_frame.pack(fill=tk.X, padx=5, pady=5)

        # 状态栏
        self.status_var = tk.StringVar(value="就绪")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief=tk.SUNKEN)
        status_bar.pack(side=tk.BOTTOM, fill=tk.X)

    def on_mode_selected(self, event=None):
        """模式选择事件处理"""
        selected_mode = self.mode_var.get()
        self.quiet_mode_frame.pack_forget()
        self.performance_mode_frame.pack_forget()
        self.custom_mode_frame.pack_forget()
        self.smart_mode_frame.pack_forget()

        if selected_mode == "静音模式":
            self.auto_mode_var.set(False)
            self.quiet_mode_frame.pack(fill=tk.X, padx=5, pady=5)
        elif selected_mode == "性能模式":
            self.auto_mode_var.set(False)
            self.performance_mode_frame.pack(fill=tk.X, padx=5, pady=5)
        elif selected_mode == "自定义模式":
            self.auto_mode_var.set(False)
            self.custom_mode_frame.pack(fill=tk.X, padx=5, pady=5)
        elif selected_mode == "智能模式":
            self.auto_mode_var.set(True)
            self.smart_mode_frame.pack(fill=tk.X, padx=5, pady=5)

    def percent_to_hex(self, percent):
        """百分比转换为十六进制"""
        if percent < 0 or percent > 100:
            raise ValueError("百分比必须在0到100之间")
        return f"0x{int(percent):02x}"

    def apply_preset_mode(self, percent):
        """应用预设模式"""

        def apply_task():
            try:
                self.enter_manual_mode()
                for fan_id in range(1, 8):
                    hex_speed = self.percent_to_hex(percent)
                    self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
                self.status_var.set(f"预设模式应用成功: {percent}%")
                messagebox.showinfo("成功", f"所有风扇已设置为{percent}%")
            except Exception as e:
                messagebox.showerror("错误", f"应用预设模式失败: {str(e)}")

        threading.Thread(target=apply_task, daemon=True).start()

    def set_single_fan(self, fan_id):
        """设置单个风扇转速"""
        percent = self.fan_percent_vars[fan_id].get()
        try:
            self.enter_manual_mode()
            hex_speed = self.percent_to_hex(percent)
            self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
            self.status_var.set(f"风扇{fan_id}已设置为{percent}%")
            messagebox.showinfo("成功", f"风扇{fan_id}转速已设置为{percent}%")
        except Exception as e:
            messagebox.showerror("错误", f"设置失败: {str(e)}")

    def start_update_cycle(self):
        """启动数据更新线程"""
        self.update_thread = threading.Thread(target=self.update_worker, daemon=True)
        self.update_thread.start()
        self.root.after(100, self.process_queue)

    def update_worker(self):
        """后台数据获取线程"""
        while self.running:
            try:
                output = self.run_ipmitool(['sensor', 'list'])
                sensors = self.parse_sensor_data(output)
                self.data_queue.put(sensors)
                self.status_var.set(f"最后更新: {datetime.now().strftime('%H:%M:%S')}")
            except Exception as e:
                self.data_queue.put(e)
            finally:
                threading.Event().wait(self.update_interval / 1000)

    def process_queue(self):
        """处理数据队列（主线程）"""
        try:
            while not self.data_queue.empty():
                item = self.data_queue.get_nowait()
                if isinstance(item, Exception):
                    self.status_var.set(f"错误: {str(item)}")
                    logging.error(str(item))
                else:
                    self.update_ui(item)
        finally:
            if self.running:
                self.root.after(100, self.process_queue)

    def update_ui(self, sensors):
        """更新界面数据"""
        # 更新温度
        for name, label in self.temp_labels.items():
            value = sensors.get(name, 'N/A')
            label.config(
                text=f"{label.cget('text').split(':')[0]}: {value}℃" if value != 'N/A' else f"{label.cget('text').split(':')[0]}: --")

        # 更新电源功率
        for name, label in self.psu_labels.items():
            value = sensors.get(name, 'N/A')
            label.config(
                text=f"{label.cget('text').split(':')[0]}: {value}W" if value != 'N/A' else f"{label.cget('text').split(':')[0]}: --")

        # 更新电压
        for name, label in self.voltage_labels.items():
            value = sensors.get(name, 'N/A')
            formatted_value = f"{float(value):.3f} V" if value != 'N/A' else '--'
            label.config(text=f"{label.cget('text').split(':')[0]}: {formatted_value}")

        # 更新风扇转速
        for i in range(1, 8):
            fan_key = f'FAN{i}_R_Speed'
            value = sensors.get(fan_key, 'N/A')
            self.fan_labels[f'FAN{i}'].config(text=f"风扇 {i}: {value} RPM" if value != 'N/A' else f"风扇 {i}: --")

        # 自动温度控制
        if self.auto_mode_var.get():
            self.auto_fan_control(sensors)

        if not self.auto_mode_var.get():
            self.check_temp_protection(sensors)
    def browse_ipmitool(self):
        """选择ipmitool路径"""
        path = filedialog.askopenfilename(
            title="选择ipmitool可执行文件",
            filetypes=[("可执行文件", "*.exe"), ("所有文件", "*.*")]
        )
        if path:
            self.ipmitool_path.set(path)
            self.save_config()

    def load_config(self):
        """加载配置文件"""
        config = configparser.ConfigParser()
        if os.path.exists('config.ini'):
            try:
                config.read('config.ini')
                self.ipmitool_path.set(config.get('DEFAULT', 'ipmitool_path', fallback=""))
                self.bmc_ip.set(config.get('DEFAULT', 'ip', fallback=self.bmc_ip.get()))
                self.bmc_user.set(config.get('DEFAULT', 'user', fallback=self.bmc_user.get()))
                self.bmc_pass.set(config.get('DEFAULT', 'password', fallback=self.bmc_pass.get()))

                # 模式有效性检查
                saved_mode = config.get('DEFAULT', 'mode', fallback="静音模式")
                if saved_mode not in ["静音模式", "性能模式", "自定义模式", "智能模式"]:
                    saved_mode = "静音模式"
                self.mode_var.set(saved_mode)

                for fan_id in range(1, 8):
                    self.fan_percent_vars[fan_id].set(
                        config.getint('DEFAULT', f'fan_{fan_id}_percent', fallback=50))

                # 加载温度控制设置
                self.temp_settings['min_temp'].set(config.getint('DEFAULT', 'min_temp', fallback=40))
                self.temp_settings['max_temp'].set(config.getint('DEFAULT', 'max_temp', fallback=70))
                self.temp_settings['min_speed'].set(config.getint('DEFAULT', 'min_speed', fallback=30))
                self.temp_settings['max_speed'].set(config.getint('DEFAULT', 'max_speed', fallback=100))
                self.auto_mode_var.set(config.getboolean('DEFAULT', 'auto_mode', fallback=False))

            except Exception as e:
                logging.error(f"配置加载失败: {str(e)}")

    def save_config(self):
        """保存配置文件"""
        config = configparser.ConfigParser()
        config['DEFAULT'] = {
            'ipmitool_path': self.ipmitool_path.get(),
            'ip': self.bmc_ip.get(),
            'user': self.bmc_user.get(),
            'password': self.bmc_pass.get(),
            'mode': self.mode_var.get()
        }
        for fan_id in range(1, 8):
            config['DEFAULT'][f'fan_{fan_id}_percent'] = str(self.fan_percent_vars[fan_id].get())

        # 保存温度控制设置
        config['DEFAULT']['min_temp'] = str(self.temp_settings['min_temp'].get())
        config['DEFAULT']['max_temp'] = str(self.temp_settings['max_temp'].get())
        config['DEFAULT']['min_speed'] = str(self.temp_settings['min_speed'].get())
        config['DEFAULT']['max_speed'] = str(self.temp_settings['max_speed'].get())
        config['DEFAULT']['auto_mode'] = str(self.auto_mode_var.get())

        with open('config.ini', 'w') as f:
            config.write(f)

    def on_close(self):
        """窗口关闭事件"""
        self.running = False
        if hasattr(self, 'update_thread') and self.update_thread.is_alive():
            self.update_thread.join(timeout=1)
        self.save_config()
        self.root.destroy()

    def test_connection(self):
        """测试BMC连接"""
        try:
            output = self.run_ipmitool(['sensor', 'list'])
            messagebox.showinfo("连接成功", "BMC连接验证通过！")
        except Exception as e:
            messagebox.showerror("连接失败", f"错误信息:\n{str(e)}")

    def run_ipmitool(self, command):
        """执行IPMI命令"""
        if not os.path.exists(self.ipmitool_path.get()):
            raise FileNotFoundError(f"找不到ipmitool: {self.ipmitool_path.get()}")

        cmd = [
                  self.ipmitool_path.get(),
                  '-I', 'lanplus',
                  '-H', self.bmc_ip.get(),
                  '-U', self.bmc_user.get(),
                  '-P', self.bmc_pass.get()
              ] + command

        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=True,
            timeout=15
        )
        return result.stdout

    def parse_sensor_data(self, output):
        """解析传感器数据"""
        sensors = {}
        for line in output.splitlines():
            if not line.strip() or '|' not in line:
                continue
            parts = [p.strip() for p in line.split('|')]
            if len(parts) >= 4:
                sensor_name = parts[0].replace(" ", "_")
                sensor_value = parts[1]

                # 过滤无效值
                if sensor_value.lower() in ['na', 'disabled', '']:
                    continue

                # 数值格式化处理
                try:
                    float(sensor_value)  # 验证是否为数值
                    sensors[sensor_name] = sensor_value
                except ValueError:
                    pass
        return sensors

    def auto_apply_custom_mode(self):
        """开机自动应用自定义模式设置"""
        if self.mode_var.get() == "自定义模式":
            self.status_var.set("正在自动应用自定义模式设置...")
            self.apply_custom_settings()

    def apply_custom_settings(self):
        """应用保存的自定义设置"""

        def apply_task():
            try:
                self.enter_manual_mode()
                success_count = 0
                for fan_id in range(1, 8):
                    percent = self.fan_percent_vars[fan_id].get()
                    try:
                        hex_speed = self.percent_to_hex(percent)
                        self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
                        success_count += 1
                        logging.info(f"风扇{fan_id}设置成功: {percent}%")
                    except Exception as e:
                        logging.error(f"风扇{fan_id}设置失败: {str(e)}")

                self.status_var.set(f"自定义模式设置应用完成，成功设置{success_count}/7个风扇")
                if success_count < 7:
                    messagebox.showwarning("部分成功",
                                           f"成功设置{success_count}个风扇，请检查未设置成功的风扇连接")

            except Exception as e:
                logging.error(f"自动应用设置失败: {str(e)}")
                messagebox.showerror("自动应用失败",
                                     f"无法自动应用自定义设置:\n{str(e)}")

        # 在独立线程中执行设置操作
        threading.Thread(target=apply_task, daemon=True).start()

    def enter_manual_mode(self):
        """进入手动控制模式"""
        try:
            self.run_ipmitool(['raw', '0x30', '0x30', '0x01', '0x00'])
        except Exception as e:
            logging.warning(f"进入手动模式失败: {str(e)}")

    def calculate_fan_speed(self, current_temp):
        """根据温度计算风扇转速百分比"""
        min_temp = self.temp_settings['min_temp'].get()
        max_temp = self.temp_settings['max_temp'].get()
        min_speed = self.temp_settings['min_speed'].get()
        max_speed = self.temp_settings['max_speed'].get()

        if current_temp <= min_temp:
            return min_speed
        elif current_temp >= max_temp:
            return max_speed
        else:
            # 线性计算转速百分比
            temp_range = max_temp - min_temp
            speed_range = max_speed - min_speed
            return min_speed + ((current_temp - min_temp) / temp_range) * speed_range

    def auto_fan_control(self, sensors):
        """自动风扇控制逻辑"""
        try:
            cpu_temps = []
            for key in ['CPU1_Temp', 'CPU2_Temp']:
                if key in sensors and sensors[key] != 'N/A':
                    cpu_temps.append(float(sensors[key]))
            if not cpu_temps:
                logging.warning("无法获取有效CPU温度数据")
                return
            current_temp = max(cpu_temps)
        except (ValueError, TypeError) as e:
            logging.error(f"温度数据解析失败: {str(e)}")
            return

        target_speed = self.calculate_fan_speed(current_temp)
        self.auto_status_var.set(f"温控状态: {current_temp:.1f}℃ → {target_speed:.0f}%")

        # 应用转速设置
        try:
            self.enter_manual_mode()
            for fan_id in range(1, 8):
                hex_speed = self.percent_to_hex(target_speed)
                self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
        except Exception as e:
            logging.error(f"自动调速失败: {str(e)}")

    def check_temp_protection(self, sensors):
        """温度保护检查"""
        try:
            cpu_temps = []
            for key in ['CPU1_Temp', 'CPU2_Temp']:
                if key in sensors and sensors[key] != 'N/A':
                    cpu_temps.append(float(sensors[key]))
            if not cpu_temps:
                return

            current_temp = max(cpu_temps)
            if current_temp > 70:
                self.activate_temp_protection(current_temp)
        except Exception as e:
            logging.error(f"温度保护检测失败: {str(e)}")

    def apply_preset_mode(self, percent):
        """应用预设模式"""

        def apply_task():
            try:
                self.enter_manual_mode()
                for fan_id in range(1, 8):
                    hex_speed = self.percent_to_hex(percent)
                    self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
                self.status_var.set(f"预设模式应用成功: {percent}%")
                messagebox.showinfo("成功", f"所有风扇已设置为{percent}%")
            except Exception as e:
                messagebox.showerror("错误", f"应用预设模式失败: {str(e)}")

        threading.Thread(target=apply_task, daemon=True).start()

    def set_single_fan(self, fan_id):
        """设置单个风扇转速"""
        percent = self.fan_percent_vars[fan_id].get()
        try:
            self.enter_manual_mode()
            hex_speed = self.percent_to_hex(percent)
            self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
            self.status_var.set(f"风扇{fan_id}已设置为{percent}%")
            messagebox.showinfo("成功", f"风扇{fan_id}转速已设置为{percent}%")
        except Exception as e:
            messagebox.showerror("错误", f"设置失败: {str(e)}")

    def start_update_cycle(self):
        """启动数据更新线程"""
        self.update_thread = threading.Thread(target=self.update_worker, daemon=True)
        self.update_thread.start()
        self.root.after(100, self.process_queue)

    def update_worker(self):
        """后台数据获取线程"""
        while self.running:
            try:
                output = self.run_ipmitool(['sensor', 'list'])
                sensors = self.parse_sensor_data(output)
                self.data_queue.put(sensors)
                self.status_var.set(f"最后更新: {datetime.now().strftime('%H:%M:%S')}")
            except Exception as e:
                self.data_queue.put(e)
            finally:
                threading.Event().wait(self.update_interval / 1000)

    def process_queue(self):
        """处理数据队列（主线程）"""
        try:
            while not self.data_queue.empty():
                item = self.data_queue.get_nowait()
                if isinstance(item, Exception):
                    self.status_var.set(f"错误: {str(item)}")
                    logging.error(str(item))
                else:
                    self.update_ui(item)
        finally:
            if self.running:
                self.root.after(100, self.process_queue)

    def update_ui(self, sensors):
        """更新界面数据"""
        # 更新温度
        for name, label in self.temp_labels.items():
            value = sensors.get(name, 'N/A')
            label.config(
                text=f"{label.cget('text').split(':')[0]}: {value}℃" if value != 'N/A' else f"{label.cget('text').split(':')[0]}: --")

        # 更新电源功率
        for name, label in self.psu_labels.items():
            value = sensors.get(name, 'N/A')
            label.config(
                text=f"{label.cget('text').split(':')[0]}: {value}W" if value != 'N/A' else f"{label.cget('text').split(':')[0]}: --")

        # 更新电压
        for name, label in self.voltage_labels.items():
            value = sensors.get(name, 'N/A')
            formatted_value = f"{float(value):.3f} V" if value != 'N/A' else '--'
            label.config(text=f"{label.cget('text').split(':')[0]}: {formatted_value}")

        # 更新风扇转速
        for i in range(1, 8):
            fan_key = f'FAN{i}_R_Speed'
            value = sensors.get(fan_key, 'N/A')
            self.fan_labels[f'FAN{i}'].config(text=f"风扇 {i}: {value} RPM" if value != 'N/A' else f"风扇 {i}: --")

        # 自动温度控制
        if self.auto_mode_var.get():
            self.auto_fan_control(sensors)
        else:
            self.check_temp_protection(sensors)

    def check_temp_protection(self, sensors):
        """温度保护检查"""
        try:
            cpu_temps = []
            for key in ['CPU1_Temp', 'CPU2_Temp']:
                if key in sensors and sensors[key] != 'N/A':
                    cpu_temps.append(float(sensors[key]))
            if not cpu_temps:
                return

            current_temp = max(cpu_temps)

            if current_temp > 70 and not self.original_settings['protection_active']:
                self.activate_temp_protection(current_temp)
            elif current_temp < 65 and self.original_settings['protection_active']:
                self.restore_original_settings()

        except Exception as e:
            logging.error(f"温度保护检测失败: {str(e)}")

    def activate_temp_protection(self, current_temp):
        """激活温度保护机制"""
        self.original_settings.update({
            'mode': self.mode_var.get(),
            'speeds': {i: self.fan_percent_vars[i].get() for i in range(1, 8)},
            'protection_active': True
        })

        logging.warning(f"温度保护触发: {current_temp}℃")
        self.status_var.set(f"温度过高({current_temp}℃)! 启用保护模式")

        def apply_protection():
            try:
                self.enter_manual_mode()
                for fan_id in range(1, 8):
                    self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', '0x46'])
                    self.fan_percent_vars[fan_id].set(70)

                self.mode_var.set("保护模式")
                messagebox.showwarning("高温保护",
                                       f"检测到CPU温度已达{current_temp}℃\n已启用风扇保护模式")

            except Exception as e:
                logging.error(f"温度保护执行失败: {str(e)}")

        threading.Thread(target=apply_protection, daemon=True).start()

    def restore_original_settings(self):
        """恢复原始设置"""
        logging.info("温度恢复正常，正在恢复原始设置")
        self.status_var.set("正在恢复原始设置...")
        self.original_settings['protection_active'] = False

        def restore_task():
            try:
                self.mode_var.set(self.original_settings['mode'])
                self.enter_manual_mode()
                for fan_id in range(1, 8):
                    original_speed = self.original_settings['speeds'][fan_id]
                    hex_speed = self.percent_to_hex(original_speed)
                    self.run_ipmitool(['raw', '0x2e', '0x30', '00', f'0{fan_id}', hex_speed])
                    self.fan_percent_vars[fan_id].set(original_speed)

                self.save_config()
                self.status_var.set("原始设置已恢复")
                messagebox.showinfo("恢复完成", "已恢复至保护前的设置")

            except Exception as e:
                logging.error(f"设置恢复失败: {str(e)}")

        threading.Thread(target=restore_task, daemon=True).start()



if __name__ == "__main__":
    root = tk.Tk()
    try:
        app = IPMIMonitorGUI(root)
        root.mainloop()
    except Exception as e:
        logging.critical(f"程序崩溃: {str(e)}")
        messagebox.showerror("致命错误", f"程序异常终止:\n{str(e)}")
